version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_URL=postgres://postgres:postgres@db:5432/banking_sim?sslmode=disable
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8080
      - ENV=dev
      - ALLOWED_ORIGINS=*
    depends_on:
      db:
        condition: service_healthy
    networks:
      - banking-network
    restart: unless-stopped
    # Temporarily reduce to 1 replica to prevent projector race conditions
    deploy:
      replicas: 1
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - banking-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - banking-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/dashboard.json:/var/lib/grafana/dashboards/banking-overview.json:ro
    depends_on:
      - prometheus
    networks:
      - banking-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - banking-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - banking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=banking_sim
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_REPLICATION_USER=replica
      - POSTGRES_REPLICATION_PASSWORD=replica_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/migrations:ro
      - ./scripts/seed.sql:/seed.sql:ro
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/01-init-db.sh:ro
      - ./docker/postgres-primary.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - banking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d banking_sim"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-replica:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=banking_sim
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_REPLICATION_USER=replica
      - POSTGRES_REPLICATION_PASSWORD=replica_password
      - PGUSER=replica
      - PGPASSWORD=replica_password
      - PGHOST=db
      - PGPORT=5432
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres-replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - banking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d banking_sim"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  postgres_replica_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  banking-network:
    driver: bridge
